/* tslint:disable */
/* eslint-disable */
/**
 * ecli API
 * RESTFul APIs provided by ecli-server
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GeneralError } from '../models';
import { GetTaskLogRequest } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { SimpleIdRequest } from '../models';
import { StartTaskRequest } from '../models';
import { TaskListResponse } from '../models';
import { TaskStatus } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of running tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * get log from server
         * @summary get log
         * @param {GetTaskLogRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskLogByID: async (body: GetTaskLogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getTaskLogByID.');
            }
            const localVarPath = `/log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pause a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseTaskByID: async (body: SimpleIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling pauseTaskByID.');
            }
            const localVarPath = `/pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resume a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeTaskByID: async (body: SimpleIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling resumeTaskByID.');
            }
            const localVarPath = `/resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a new task
         * @param {StartTaskRequest} body Task data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTask: async (body: StartTaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling startTask.');
            }
            const localVarPath = `/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTaskByID: async (body: SimpleIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling stopTaskByID.');
            }
            const localVarPath = `/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of running tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskListResponse>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTaskList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get log from server
         * @summary get log
         * @param {GetTaskLogRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLogByID(body: GetTaskLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse2001>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTaskLogByID(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Pause a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskStatus>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).pauseTaskByID(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Resume a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskStatus>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resumeTaskByID(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Start a new task
         * @param {StartTaskRequest} body Task data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startTask(body: StartTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).startTask(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Stop a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).stopTaskByID(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get list of running tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskList(options?: AxiosRequestConfig): Promise<AxiosResponse<TaskListResponse>> {
            return DefaultApiFp(configuration).getTaskList(options).then((request) => request(axios, basePath));
        },
        /**
         * get log from server
         * @summary get log
         * @param {GetTaskLogRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskLogByID(body: GetTaskLogRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse2001>>> {
            return DefaultApiFp(configuration).getTaskLogByID(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pause a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskStatus>> {
            return DefaultApiFp(configuration).pauseTaskByID(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resume a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskStatus>> {
            return DefaultApiFp(configuration).resumeTaskByID(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start a new task
         * @param {StartTaskRequest} body Task data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startTask(body: StartTaskRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return DefaultApiFp(configuration).startTask(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop a task by id
         * @param {SimpleIdRequest} body Task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DefaultApiFp(configuration).stopTaskByID(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get list of running tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getTaskList(options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskListResponse>> {
        return DefaultApiFp(this.configuration).getTaskList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * get log from server
     * @summary get log
     * @param {GetTaskLogRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getTaskLogByID(body: GetTaskLogRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse2001>>> {
        return DefaultApiFp(this.configuration).getTaskLogByID(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Pause a task by id
     * @param {SimpleIdRequest} body Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async pauseTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskStatus>> {
        return DefaultApiFp(this.configuration).pauseTaskByID(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Resume a task by id
     * @param {SimpleIdRequest} body Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async resumeTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskStatus>> {
        return DefaultApiFp(this.configuration).resumeTaskByID(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Start a new task
     * @param {StartTaskRequest} body Task data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async startTask(body: StartTaskRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return DefaultApiFp(this.configuration).startTask(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Stop a task by id
     * @param {SimpleIdRequest} body Task id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async stopTaskByID(body: SimpleIdRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DefaultApiFp(this.configuration).stopTaskByID(body, options).then((request) => request(this.axios, this.basePath));
    }
}
